{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchResults/SearchResults.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","find","playlistTrack","push","filter","console","info","style","textAlign","paddingTop","color","display","textDecoration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31533d9c.chunk.js","sourcesContent":["const clientId = '361a69dfcb584e2583e934f70d3739b3'; \r\nconst redirectUri = 'https://damodhar918.github.io/jammming/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    // const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    });\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    // const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({name: name})\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({uris: trackUris})\r\n        });\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","\r\nimport React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            term:''\r\n        }\r\n        \r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({term: e.target.value});\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar;\r\n","\r\nimport React from 'react';\r\nimport './Track.css';\r\n\r\n\r\nclass Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }\r\n        return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n    }\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name} \r\n                        {/* {this.props.track && this.props.track.tracks} */}\r\n                    </h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n                </div>  \r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n\r\n\r\nexport default Track;\r\n","\r\nimport React from 'react';\r\nimport Track from '../Track/Track';\r\nimport './TrackList.css';\r\n\r\n\r\nclass TrackList extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {/* {this.props.tracks.map(track => <Track key={track.id} track={track}  />)} */}\r\n                {this.props.tracks && this.props.tracks.map(track => \r\n                <Track key={track.id} \r\n                       track={track} \r\n                       onAdd={this.props.onAdd} \r\n                       onRemove={this.props.onRemove}\r\n                       isRemoval={this.props.isRemoval} \r\n                />)}\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n\r\n\r\nexport default TrackList;\r\n","\r\nimport React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange =this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e){\r\n        this.props.onNameChange(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input  onChange={this.handleNameChange}\r\n                        value={this.props.playlistName}/>\r\n                <TrackList tracks={this.props.playlistTracks}\r\n                            onRemove={this.props.onRemove}\r\n                            isRemoval={true}\r\n                            \r\n                />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n\r\n\r\nexport default Playlist;\r\n","\r\nimport React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\nclass SearchResults extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} \r\n                                    onAdd={this.props.onAdd}\r\n                                    isRemoval={false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Playlist from '../Playlist/Playlist';\nimport SearchResults from '../SearchResults/SearchResults'\nimport Spotify from '../../util/Spotify';\n\nSpotify.getAccessToken();\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(playlistTrack => playlistTrack.id === track.id)){\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks });\n  }\n\n  // addTrack(track) {\n  //   let tracks = this.state.playlistTracks;\n  //   if (!tracks.find(playlistTrack => playlistTrack.id === track.id)) {\n  //     this.setState(prevState => ({\n  //       playlistTracks: [...prevState.playlistTracks, track]\n  //     }));\n  //   }\n  // }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(playlistTrack => playlistTrack.id !== track.id);\n    this.setState({playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(playlistTrack => playlistTrack.uri);\n    if(this.state.playlistTracks.length !== 0){\n      Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n        this.setState({\n          playlistTracks: [],\n        });\n        this.updatePlaylistName('My playlist');\n        console.info(trackUris);\n      });\n    }\n  }\n\n  // savePlaylist() {\n  //   const trackUris = this.state.playlistTracks.map(track => track.uri);\n  //   if(this.state.playlistTracks.length !== 0){\n  //     Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n  //       this.setState({\n  //         playlistName: 'New Playlist',\n  //         playlistTracks: []\n  //       });\n  //     });\n  //   }\n  // }\n\n  // search(term) {\n  //   Spotify.search(term).then(searchResults => this.setState({searchResults: searchResults}));\n  // }\n  \n  search(term) {\n    Spotify.search(term)\n      .then(searchResults => this.setState({\n        searchResults: searchResults\n      }));\n  }\n\n  render(){\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack} \n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            /> \n            \n          </div>\n          <h3 style={{textAlign:'center',paddingTop: 40}}>@desined by <a style={{color:'#6e6d8b', display: 'inline-block', textDecoration:'none'}} target='blank' href='https://github.com/damodhar918'>dj</a></h3>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}